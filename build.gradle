buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.8"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'war'
    id "com.bertramlabs.asset-pipeline" version "3.0.10"
    id "com.moowork.node" version "1.2.0"
}

version "0.1"
group "ripplr.grails3"

apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply from: "${project.projectDir}/gradle/quality.gradle"
apply from: "${project.projectDir}/gradle/coverage.gradle"

def elasticsearchVersion = '5.4.1'

ext['elasticsearch.version'] = elasticsearchVersion

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins3" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile 'org.grails.plugins:spring-security-core:3.2.1'
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-ehcache"
    compile 'org.grails.plugins:elasticsearch:2.4.1'
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    runtime "com.h2database:h2"
    runtime group: 'mysql', name: 'mysql-connector-java', version: '8.0.12'

    runtime "org.apache.tomcat:tomcat-jdbc"
    testCompile 'com.github.groovy-wslite:groovy-wslite:1.1.2'
    testCompile "org.grails:grails-test-mixins:3.3.0"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb:1.1.2"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}


bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
    includes = ['fonts/*']
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

task npmLint(type: NpmTask) {
    args = ['run', 'lint']
}

npmLint.dependsOn npmInstall
//test.dependsOn npmLint

node {
    version = '8.9.4'
    workDir = file("${project.buildDir}/nodejs")
    download = true
}
